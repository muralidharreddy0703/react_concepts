{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","className","name","age","children","type","onChange","changed","value","App","state","otherState","switchNameHandler","newName","console","log","setState","nameChangedHandler","event","target","style","backgroundColor","border","padding","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAaeA,G,YAXA,SAACC,GACZ,OACI,yBAAKC,UAAU,UACb,uCAAaD,EAAME,KAAnB,cAAoCF,EAAMG,IAA1C,cACC,4BAAKH,EAAMI,UACX,2BAAOC,KAAK,OAAOC,SAAUN,EAAMO,QAASC,MAAOR,EAAME,UC8ErDO,E,4MA9EZC,MAAQ,CACNX,OAAS,CACP,CAACG,KAAK,SAAUC,IAAI,IACpB,CAACD,KAAK,OAAQC,IAAI,IAClB,CAACD,KAAK,SAAUC,IAAK,IACrB,CAACD,KAAK,SAAUC,IAAK,KAEvBQ,WAAY,0B,EAGdC,kBAAoB,SAACC,GACnBC,QAAQC,IAAI,4BAEZ,EAAKC,SAAS,CACZjB,OAAQ,CACP,CAACG,KAAKW,EAASV,IAAI,IACnB,CAACD,KAAK,OAAQC,IAAI,IAClB,CAACD,KAAK,oBAAqBC,IAAK,IAChC,CAACD,KAAK,SAAUC,IAAK,Q,EAK1Bc,mBAAqB,SAACC,GACrB,EAAKF,SAAS,CACZjB,OAAQ,CACP,CAACG,KAAK,aAAcC,IAAI,IACxB,CAACD,KAAKgB,EAAMC,OAAOX,MAAOL,IAAI,IAC9B,CAACD,KAAK,oBAAqBC,IAAK,IAChC,CAACD,KAAK,SAAUC,IAAK,Q,uDAKjB,IAAD,OAON,OACE,yBAAKF,UAAU,OAEV,kEAFL,cAKM,6BACA,4BAAQmB,MAZF,CACZC,gBAAiB,SACjBC,OAAQ,kBACRC,QAAS,OAUHC,QAAU,kBAAM,EAAKZ,kBAAkB,uBADvC,eAED,kBAAC,EAAD,CACCV,KAAMuB,KAAKf,MAAMX,OAAO,GAAGG,KAC3BC,IAAKsB,KAAKf,MAAMX,OAAO,GAAGI,MAE3B,kBAAC,EAAD,CACCD,KAAMuB,KAAKf,MAAMX,OAAO,GAAGG,KAC3BC,IAAKsB,KAAKf,MAAMX,OAAO,GAAGI,IAC1BI,QAASkB,KAAKR,qBAEf,kBAAC,EAAD,CACCf,KAAMuB,KAAKf,MAAMX,OAAO,GAAGG,KAC3BC,IAAKsB,KAAKf,MAAMX,OAAO,GAAGI,MAI3B,kBAAC,EAAD,CACCD,KAAMuB,KAAKf,MAAMX,OAAO,GAAGG,KAC3BC,IAAKsB,KAAKf,MAAMX,OAAO,GAAGI,W,GArEpBuB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.a571faef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\nconst person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n          <p>i am the {props.name} and  i am {props.age} years old</p>  \r\n           <h2>{props.children}</h2>\r\n           <input type=\"text\" onChange={props.changed} value={props.name}  />\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nexport default person;","import React, { Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n\n   state = {\n     person : [\n       {name:'Murali', age:25},\n       {name:'Uday', age:20},\n       {name:'Sushma', age: 22},\n       {name:'Vishnu', age: 30}\n     ],\n     otherState: 'some other state value'\n   }\n\n   switchNameHandler = (newName) => {\n     console.log(\"i was in onclick button \");\n\n     this.setState({\n       person: [\n        {name:newName, age:25},\n        {name:'Uday', age:20},\n        {name:'Sushma SangiReddy', age: 22},\n        {name:'Vishnu', age: 30}\n      ]\n     })\n   }\n\n   nameChangedHandler = (event) => {\n    this.setState({\n      person: [\n       {name:\"Muralidhar\", age:25},\n       {name:event.target.value, age:20},\n       {name:'Sushma SangiReddy', age: 22},\n       {name:'Vishnu', age: 30}\n     ]\n    })\n   }\n\n  render(){\n\n    const style = {\n      backgroundColor: 'Orange',\n      border: '1px solid black',\n      padding: '8px'\n    }\n    return (\n      <div className=\"App\">\n         \n           <h2>i am working as React.js developer</h2> \n            Learn React\n\n            <br></br>\n            <button style={style}\n            onClick={ () => this.switchNameHandler(\"Muralidhar Reddy \")}>Switch Name</button>\n           <Person \n            name={this.state.person[0].name} \n            age={this.state.person[0].age} \n           />\n           <Person \n            name={this.state.person[1].name} \n            age={this.state.person[1].age} \n            changed={this.nameChangedHandler}\n           />\n           <Person \n            name={this.state.person[2].name} \n            age={this.state.person[2].age}\n           // clickme= {this.switchNameHandler.bind(this,\"NickName sony\")}\n          \n           />\n           <Person \n            name={this.state.person[3].name} \n            age={this.state.person[3].age}\n           />\n\n        \n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}